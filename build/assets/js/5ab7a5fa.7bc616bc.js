"use strict";(self.webpackChunkljyws=self.webpackChunkljyws||[]).push([[425],{3033:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>T,contentTitle:()=>c,default:()=>S,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"FreeRTOS/Scheduler/freertos_scheduler","title":"FreeRTOS Scheduler","description":"FreeRTOS Scheduler","source":"@site/docs/FreeRTOS/Scheduler/scheduler.md","sourceDirName":"FreeRTOS/Scheduler","slug":"/FreeRTOS/Scheduler/","permalink":"/docs/FreeRTOS/Scheduler/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"freertos_scheduler","title":"FreeRTOS Scheduler","sidebar_label":"Scheduler"},"sidebar":"docs","previous":{"title":"List","permalink":"/docs/FreeRTOS/List/"},"next":{"title":"Simulation","permalink":"/docs/StepperCtrl/simulation"}}');var i=e(6070),s=e(7529);const o={id:"freertos_scheduler",title:"FreeRTOS Scheduler",sidebar_label:"Scheduler"},c=void 0,T={},l=[{value:"FreeRTOS Scheduler",id:"freertos-scheduler",level:2},{value:"\u4e00\u4e9b\u6982\u5ff5",id:"\u4e00\u4e9b\u6982\u5ff5",level:3},{value:"Systick",id:"systick",level:3}];function d(t){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"freertos-scheduler",children:"FreeRTOS Scheduler"}),"\n",(0,i.jsx)(n.p,{children:"FreeRTOS\u7684\u8c03\u5ea6\u539f\u7406\u548c\u5185\u6838\u76f8\u5173\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u6709\u4e00\u4e9bCortex-M\u5185\u6838\u76f8\u5173\u7684\u77e5\u8bc6\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"\u4e00\u4e9b\u6982\u5ff5",children:"\u4e00\u4e9b\u6982\u5ff5"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5728Cortex-M\u5185\u6838\u4e2d\uff0c\u4f7f\u7528Systick\u4f5c\u4e3a\u5fc3\u8df3\u65f6\u949f\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f1ms\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u8fdb\u5165Systick\u4e2d\u65ad\u540e\uff0c\u5185\u6838\u4f1a\u5728\u7cfb\u7edf\u7684\u5c31\u7eea\u5217\u8868\u4e2d\u4ece\u9ad8\u4f18\u5148\u7ea7\u5f00\u59cb\u627e\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5982\u679c\u4efb\u52a1\u72b6\u6001\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2aPendSV\u4e2d\u65ad\uff0c\u5185\u6838\u4f1a\u5728PendSV\u4e2d\u65ad\u4e2d,\u6539\u53d8\u8fdb\u7a0b\u7684\u6808\u6307\u9488PSP\uff0c\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"systick",children:"Systick"}),"\n",(0,i.jsx)(n.p,{children:"\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\u6765\u8bf4\uff0c\u65f6\u949f\u662f\u7cfb\u7edf\u80fd\u591f\u8fd0\u8f6c\u7684\u6838\u5fc3\uff0c\u4e5f\u5c31\u662f\u8c03\u5ea6\u5668\u7684\u6838\u5fc3\u4e86\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6765\u7814\u7a76\u4e00\u4e0bSystick"}),"\n",(0,i.jsx)(n.p,{children:"\u5728FreeRTOS\u4e2d\uff0cSystick\u7684\u521d\u59cb\u5316\u51fd\u6570\u4e3a\uff1avPortSetupTimerInterrupt\uff0c\u4e5f\u5c31\u662f\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void vPortSetupTimerInterrupt( void )\r\n{\r\n\t/* Calculate the constants required to configure the tick interrupt. */\r\n\t#if( configUSE_TICKLESS_IDLE == 1 )\r\n\t{\r\n\t\tulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );\r\n\t\txMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;\r\n\t\tulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );\r\n\t}\r\n\t#endif\r\n\r\n\tportNVIC_SYSTICK_CTRL_REG = 0UL;\r\n\tportNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;\r\n\r\n\tportNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;\r\n\tportNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );\r\n}\r\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u800cSystick\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u662f\uff1axPortSysTickHandler\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void xPortSysTickHandler( void )\r\n{\r\n\tportDISABLE_INTERRUPTS();\r\n\t{\r\n\t\tif( xTaskIncrementTick() != pdFALSE )\r\n\t\t{\r\n\t\t\tportNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;\r\n\t\t}\r\n\t}\r\n\tportENABLE_INTERRUPTS();\r\n}\r\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230 \u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u91cc\u9762\u4f7f\u7528\u4e86xTaskIncrementTick()\u51fd\u6570\uff0c\u597d\u597d\u7814\u7a76\u4e00\u4e0b\uff0c\u8be5\u51fd\u6570\u539f\u578b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"BaseType_t xTaskIncrementTick( void )\r\n{\r\n    /* 1. \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u4efb\u52a1\u5757 */\r\n    TCB_t * pxTCB;\r\n\r\n    /* 2. \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b58\u50a8\u67d0\u4e2a\u4efb\u52a1\u72b6\u6001\u5217\u8868\u9879\u91cc\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u901a\u5e38\u8868\u793a\u4efb\u52a1\u7684\u5ef6\u8fdf\u65f6\u95f4\u6216\u8005\u8d85\u65f6\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\u4efb\u52a1\u8981\u7b49\u5f85\u591a\u5c11\u4e2a\u6ef4\u7b54\u6570\u624d\u4ece\u963b\u585e\u8f6c\u4e3a\u5c31\u7eea */\r\n    TickType_t xItemValue;\r\n\r\n    /* 3. \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7528\u4e8e\u8868\u793a\u662f\u5426\u9700\u8981\u8fdb\u884c\u4efb\u52a1\u5207\u6362 */\r\n    BaseType_t xSwitchRequired = pdFALSE;\r\n\r\n    /* 4. \u8bb0\u5f55\u66f4\u65b0\u5f53\u524d\u7684\u65f6\u949f\u8282\u62cd\u6570 */\r\n\ttraceTASK_INCREMENT_TICK( xTickCount );\r\n\r\n    /* 5. \u7528\u6765\u5224\u65ad\u8c03\u5ea6\u5668\u662f\u5426\u88ab\u6302\u8d77\uff0c\u56e0\u4e3a\u5f53\u8c03\u5ea6\u5668\u88ab\u6302\u8d77\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u53d1\u751f\u4efb\u52a1\u5207\u6362 */\r\n\tif( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )\r\n\t{\r\n\r\n    /* 6. \u5982\u679c\u6ca1\u6709\u88ab\u6302\u8d77 \u5219\u628a\u8ba1\u65f6\u5668\u52a0\u4e00\uff0c\u8868\u793a\u4e0b\u4e00\u4e2a\u8282\u62cd */\r\n\t\tconst TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;\r\n\r\n\t/* 7. \u66f4\u65b0\u5f53\u524d\u7684\u65f6\u949f\u8282\u62cd\u6570 */\r\n\t\txTickCount = xConstTickCount;\r\n\r\n        /* 8. \u5982\u679c\u8282\u62cd\u6570\u7b49\u4e8e0 */\r\n\t\tif( xConstTickCount == ( TickType_t ) 0U )\r\n\t\t{\r\n\r\n            /* 9. \u5207\u6362\u5ef6\u8fdf\u4efb\u52a1\u5217\u8868 */\r\n\t\t\ttaskSWITCH_DELAYED_LISTS();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n            /* 10. \u5426\u5219\u6807\u8bb0\u6d4b\u8bd5\u8986\u76d6\u7387 */\r\n\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t}\r\n\r\n        /* 11. \u5982\u679c\u5f53\u524d\u7684\u8282\u62cd\u6570\u5927\u4e8e\u6216\u7b49\u4e8e\u4e0b\u4e00\u4e2a\u4efb\u52a1\u89e3\u9664\u963b\u585e\u7684\u65f6\u95f4 */\r\n\t\tif( xConstTickCount >= xNextTaskUnblockTime )\r\n\t\t{\r\n\t\t\tfor( ;; )\r\n\t\t\t{\r\n                /* 12. \u68c0\u67e5\u5ef6\u8fdf\u4efb\u52a1\u5217\u8868\u662f\u5426\u4e3a\u7a7a */\r\n\t\t\t\tif( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )\r\n\t\t\t\t{\r\n                    /* 13. \u5982\u679c\u5ef6\u8fdf\u4efb\u52a1\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u4e0b\u4e00\u4e2a\u4efb\u52a1\u7684\u963b\u585e\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u65e0\u9650\u5927 */\r\n\t\t\t\t\txNextTaskUnblockTime = portMAX_DELAY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tpxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );\r\n\t\t\t\t\txItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );\r\n\t\t\t\t\tif( xConstTickCount < xItemValue )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\txNextTaskUnblockTime = xItemValue;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* It is time to remove the item from the Blocked state. */\r\n\t\t\t\t\t( void ) uxListRemove( &( pxTCB->xStateListItem ) );\r\n\r\n\t\t\t\t\t/* Is the task waiting on an event also?  If so remove\r\n\t\t\t\t\tit from the event list. */\r\n\t\t\t\t\tif( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t( void ) uxListRemove( &( pxTCB->xEventListItem ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* Place the unblocked task into the appropriate ready\r\n\t\t\t\t\tlist. */\r\n\t\t\t\t\tprvAddTaskToReadyList( pxTCB );\r\n\r\n\t\t\t\t\t/* A task being unblocked cannot cause an immediate\r\n\t\t\t\t\tcontext switch if preemption is turned off. */\r\n\t\t\t\t\t#if (  configUSE_PREEMPTION == 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t/* Preemption is on, but a context switch should\r\n\t\t\t\t\t\tonly be performed if the unblocked task has a\r\n\t\t\t\t\t\tpriority that is equal to or higher than the\r\n\t\t\t\t\t\tcurrently executing task. */\r\n\t\t\t\t\t\tif( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\txSwitchRequired = pdTRUE;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t#endif /* configUSE_PREEMPTION */\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Tasks of equal priority to the currently running task will share\r\n\t\tprocessing time (time slice) if preemption is on, and the application\r\n\t\twriter has not explicitly turned time slicing off. */\r\n\t\t#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )\r\n\t\t{\r\n\t\t\tif( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )\r\n\t\t\t{\r\n\t\t\t\txSwitchRequired = pdTRUE;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t}\r\n\t\t}\r\n\t\t#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */\r\n\r\n\t\t#if ( configUSE_TICK_HOOK == 1 )\r\n\t\t{\r\n\t\t\t/* Guard against the tick hook being called when the pended tick\r\n\t\t\tcount is being unwound (when the scheduler is being unlocked). */\r\n\t\t\tif( xPendedTicks == ( TickType_t ) 0 )\r\n\t\t\t{\r\n\t\t\t\tvApplicationTickHook();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t}\r\n\t\t}\r\n\t\t#endif /* configUSE_TICK_HOOK */\r\n\r\n\t\t#if ( configUSE_PREEMPTION == 1 )\r\n\t\t{\r\n\t\t\tif( xYieldPending != pdFALSE )\r\n\t\t\t{\r\n\t\t\t\txSwitchRequired = pdTRUE;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmtCOVERAGE_TEST_MARKER();\r\n\t\t\t}\r\n\t\t}\r\n\t\t#endif /* configUSE_PREEMPTION */\r\n\t}\r\n\telse\r\n\t{\r\n\t\t++xPendedTicks;\r\n\r\n\t\t/* The tick hook gets called at regular intervals, even if the\r\n\t\tscheduler is locked. */\r\n\t\t#if ( configUSE_TICK_HOOK == 1 )\r\n\t\t{\r\n\t\t\tvApplicationTickHook();\r\n\t\t}\r\n\t\t#endif\r\n\t}\r\n\r\n\treturn xSwitchRequired;\r\n}\n"})})]})}function S(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},7529:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>c});var r=e(758);const i={},s=r.createContext(i);function o(t){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function c(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),r.createElement(s.Provider,{value:n},t.children)}}}]);